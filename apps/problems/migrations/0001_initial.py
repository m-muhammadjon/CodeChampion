# Generated by Django 4.2 on 2023-06-19 06:11

import ckeditor_uploader.fields
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=256, verbose_name='title')),
                ('slug', models.SlugField(max_length=256, unique=True, verbose_name='slug')),
            ],
            options={
                'ordering': ('-created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=256, verbose_name='title')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='description')),
                ('input_data', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='input data')),
                ('output_data', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='output data')),
                ('time_limit', models.PositiveIntegerField(verbose_name='time limit')),
                ('memory_limit', models.PositiveIntegerField(verbose_name='memory limit')),
                ('difficulty', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='difficulty')),
                ('solved_users_count', models.PositiveIntegerField(default=0, verbose_name='solved users count')),
                ('accepted_submissions_count', models.PositiveIntegerField(default=0, verbose_name='accepted submissions count')),
                ('total_submissions_count', models.PositiveIntegerField(default=0, verbose_name='total submissions count')),
                ('acceptance_rate', models.FloatField(default=0, verbose_name='acceptance rate')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('tags', models.ManyToManyField(related_name='problems', to='problems.tag', verbose_name='tags')),
            ],
            options={
                'ordering': ('-created',),
                'abstract': False,
            },
        ),
    ]
